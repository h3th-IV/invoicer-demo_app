Test Assignment: Invoicing Application
Overview
You are tasked with designing and building an Invoicing Application in 2 days (or
more)
We’re not looking for perfection, or even a complete application. The application
does not have to be complete, but it should be demoable.
You&#39;re not expected to complete everything. Focus on delivering a solid foundation,
thoughtful trade-offs, and clean, extensible work. Missing features should have a clear
plan for how they would be implemented if given more time
This assignment is not just about building features — we are assessing how you think,
plan, design, and prioritize under time constraints.
If you have a framework or scaffold you use when building new applications, you are
permitted to use that here.
Candidates who complete AI-Powered Query section successfully are given a
very strong hiring advantage
Time Limit
You have a total of 2 days — you may structure it as one block or break it into multiple
sessions. Let us know how you approached the timing. Feel free to take more time if
needed.
Core Objectives
Must-Have (Prioritize these)
These are the baseline features that showcase your understanding of basic data flow,
UX, and structure.
1. Invoice Creation Form
o Required fields: invoice number (autogenerated), issue date, due date,
client, list of items (item name, quantity, unit price), total.
o Form validation required.
o Total should be automatically calculated.
2. Invoice List View
o Table or card view listing all invoices.

o Show: invoice number, client name, due date, amount, status
(paid/unpaid).
o Support sorting or basic filtering (e.g., by status).
3. Mark Invoice as Paid/Unpaid
o Visual indicator: A way to handle payments and update payment
4. Client Management
o Add/edit/delete clients.
o Store client data (name, contact info, billing address).
o Associate clients with invoices.

High-Impact Bonus: AI-Powered Query
Integrate an LLM (e.g., OpenAI API) to allow users to query invoice and client data
using natural language. Candidates who complete this successfully are given a
very strong hiring advantage
Sample queries it should handle:
 Given the purchase history of my clients, suggest who is the most likely to buy
&lt;Product/Service X&gt;
 For each customer, based on their purchase history, suggest one or more
products I can likely cross-sell or up-sell to them
 Which clients show signs of churn risk based on declining invoice volume or
delayed payments?
 Identify clients whose buying patterns have changed significantly in the last 3
months.

Advanced Objectives
You can attempt any of these if you have time or want to showcase your strengths:
1. Overdue Handling
o Automatic detection of overdue invoices based on current date vs. due
date.
o Visual highlight (e.g., red badge).
2. Authentication (Mock or Real)
o Simulate a login experience.

3. Invoice PDF Export (Bonus)
o Generate a PDF copy of any invoice for download.
4. Responsive UI
o Ensure the app works well on both desktop and mobile.
o Use any responsive framework (Bootstrap, Tailwind, etc.).
5. Dark Mode (Optional)
o Support toggling between light and dark themes.
6. Recurring Invoices
o Allow creating invoices that repeat monthly/weekly.
o Automatically generate future invoices based on schedule.
7. Payment Tracking
o Allow partial payments.
o Show payment history per invoice (date, amount, method).
o Display remaining balance if not fully paid.
8. Email Invoice (Mock or Real)
o Send invoice to client via email.
o Allow preview before sending.
o Use mock service or real email API (e.g., SendGrid).
9. Multi-Currency Support
o Select currency when creating invoice.
o Format amounts accordingly.
o Optional: store exchange rate.
10. User Roles and Permissions
o Simulate admin vs regular user access.
o Admins can manage all invoices/clients; users can view limited data.
11. Dashboard with Metrics
o Display total revenue, overdue amount, paid/unpaid count, etc.
o Use simple charts (bar/pie) or KPI cards.
12. Import/Export Data
o Upload invoices/clients from CSV file.
o Export all invoices or reports to CSV.
13. Audit Log (Activity Tracker)
o Track and display changes (create/update/delete) with timestamp and
user.
14. Autosave Drafts
o Save incomplete invoice forms as drafts.
o Allow resuming later.
15. Invoice Templates
o Let users choose a visual template for invoice layout.
1. Layout preferences per user/client.

Tech Requirements
 Tech Stack: Use a stack you’re comfortable with but ensure it’s something
maintainable. You must use a database, server-side application, and client-side
application.
 Data Persistence:
o A database must be used. You may pick your preferred database.

Deliverables
1. GitHub Repository
o Well-structured codebase.
o Commit history should reflect progress (don’t just push once at the end).
2. README.md
Your README must include:
o Project setup instructions (how to run it).
o Time spent on each section or feature.
o Features completed and not completed.
o Your thought process and prioritization strategy.
o What you&#39;d do next if given more time.
o Any known limitations or bugs.
3. Optional but Encouraged
o Demo video (1–2 min) walking through your work and design choices.
o Screenshots or screen recordings.

What We’re Evaluating
We’re not looking for perfection. We want to understand:
 How you approach problem-solving
 How you prioritize under time constraints

 Your architecture and code quality
 UI/UX decisions and clarity
 Documentation and communication
 Whether you made intentional trade-offs

Submission Instructions
 Send the public GitHub repo link.
 If applicable, include a Loom/video link or any other supporting material.
 Mention the stack you chose and why.
