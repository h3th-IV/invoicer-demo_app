{"ast":null,"code":"/**\n * Extracts the error message from API response\n * @param {Error} error - The error object from axios\n * @returns {string} - The error message to display\n */\nexport const extractErrorMessage = error => {\n  // Check if it's an axios error with response\n  if (error.response && error.response.data) {\n    const {\n      data\n    } = error.response;\n\n    // Check if the backend returns error in the expected format\n    if (data.error) {\n      return data.error;\n    }\n\n    // Check if the backend returns message field\n    if (data.message) {\n      return data.message;\n    }\n\n    // Check if there's a specific error message\n    if (data.errors && Array.isArray(data.errors)) {\n      return data.errors.join(', ');\n    }\n\n    // Fallback to status text\n    if (error.response.statusText) {\n      return error.response.statusText;\n    }\n  }\n\n  // Check if it's a network error\n  if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n    return 'Network error: Unable to connect to the server. Please check your internet connection.';\n  }\n\n  // Check if it's a timeout error\n  if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n    return 'Request timeout: The server took too long to respond. Please try again.';\n  }\n\n  // Check if it's a CORS error\n  if (error.message.includes('CORS')) {\n    return 'CORS error: Unable to access the server. Please check if the backend is running.';\n  }\n\n  // Default error message\n  return error.message || 'An unexpected error occurred. Please try again.';\n};\n\n/**\n * Handles API errors and shows appropriate toast messages\n * @param {Error} error - The error object from axios\n * @param {Function} toast - The toast function from react-hot-toast\n * @param {string} defaultMessage - Default message if error extraction fails\n */\nexport const handleApiError = (error, toast, defaultMessage = 'Operation failed') => {\n  const errorMessage = extractErrorMessage(error);\n  toast.error(errorMessage || defaultMessage);\n  console.error('API Error:', error);\n};","map":{"version":3,"names":["extractErrorMessage","error","response","data","message","errors","Array","isArray","join","statusText","code","includes","handleApiError","toast","defaultMessage","errorMessage","console"],"sources":["/home/heth/herxes/web/nothe/invoicer-demo_app/front-end/src/utils/errorHandler.js"],"sourcesContent":["/**\n * Extracts the error message from API response\n * @param {Error} error - The error object from axios\n * @returns {string} - The error message to display\n */\nexport const extractErrorMessage = (error) => {\n  // Check if it's an axios error with response\n  if (error.response && error.response.data) {\n    const { data } = error.response;\n    \n    // Check if the backend returns error in the expected format\n    if (data.error) {\n      return data.error;\n    }\n    \n    // Check if the backend returns message field\n    if (data.message) {\n      return data.message;\n    }\n    \n    // Check if there's a specific error message\n    if (data.errors && Array.isArray(data.errors)) {\n      return data.errors.join(', ');\n    }\n    \n    // Fallback to status text\n    if (error.response.statusText) {\n      return error.response.statusText;\n    }\n  }\n  \n  // Check if it's a network error\n  if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n    return 'Network error: Unable to connect to the server. Please check your internet connection.';\n  }\n  \n  // Check if it's a timeout error\n  if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n    return 'Request timeout: The server took too long to respond. Please try again.';\n  }\n  \n  // Check if it's a CORS error\n  if (error.message.includes('CORS')) {\n    return 'CORS error: Unable to access the server. Please check if the backend is running.';\n  }\n  \n  // Default error message\n  return error.message || 'An unexpected error occurred. Please try again.';\n};\n\n/**\n * Handles API errors and shows appropriate toast messages\n * @param {Error} error - The error object from axios\n * @param {Function} toast - The toast function from react-hot-toast\n * @param {string} defaultMessage - Default message if error extraction fails\n */\nexport const handleApiError = (error, toast, defaultMessage = 'Operation failed') => {\n  const errorMessage = extractErrorMessage(error);\n  toast.error(errorMessage || defaultMessage);\n  console.error('API Error:', error);\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,GAAIC,KAAK,IAAK;EAC5C;EACA,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,EAAE;IACzC,MAAM;MAAEA;IAAK,CAAC,GAAGF,KAAK,CAACC,QAAQ;;IAE/B;IACA,IAAIC,IAAI,CAACF,KAAK,EAAE;MACd,OAAOE,IAAI,CAACF,KAAK;IACnB;;IAEA;IACA,IAAIE,IAAI,CAACC,OAAO,EAAE;MAChB,OAAOD,IAAI,CAACC,OAAO;IACrB;;IAEA;IACA,IAAID,IAAI,CAACE,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACE,MAAM,CAAC,EAAE;MAC7C,OAAOF,IAAI,CAACE,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC;IAC/B;;IAEA;IACA,IAAIP,KAAK,CAACC,QAAQ,CAACO,UAAU,EAAE;MAC7B,OAAOR,KAAK,CAACC,QAAQ,CAACO,UAAU;IAClC;EACF;;EAEA;EACA,IAAIR,KAAK,CAACS,IAAI,KAAK,eAAe,IAAIT,KAAK,CAACG,OAAO,CAACO,QAAQ,CAAC,eAAe,CAAC,EAAE;IAC7E,OAAO,wFAAwF;EACjG;;EAEA;EACA,IAAIV,KAAK,CAACS,IAAI,KAAK,cAAc,IAAIT,KAAK,CAACG,OAAO,CAACO,QAAQ,CAAC,SAAS,CAAC,EAAE;IACtE,OAAO,yEAAyE;EAClF;;EAEA;EACA,IAAIV,KAAK,CAACG,OAAO,CAACO,QAAQ,CAAC,MAAM,CAAC,EAAE;IAClC,OAAO,kFAAkF;EAC3F;;EAEA;EACA,OAAOV,KAAK,CAACG,OAAO,IAAI,iDAAiD;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAGA,CAACX,KAAK,EAAEY,KAAK,EAAEC,cAAc,GAAG,kBAAkB,KAAK;EACnF,MAAMC,YAAY,GAAGf,mBAAmB,CAACC,KAAK,CAAC;EAC/CY,KAAK,CAACZ,KAAK,CAACc,YAAY,IAAID,cAAc,CAAC;EAC3CE,OAAO,CAACf,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}